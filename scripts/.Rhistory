if(!is.installed('XLConnect'))
install.packages('XLConnect')
library('XLConnect')
ebay <- readWorksheetFromFile('eBayAuctions.xls',sheet=1)
class(ebay)
str(ebay)
if(!is.installed('xlsx'))
install.packages('xlsx')
library('xlsx')
write.xlsx(results, file = 'results.xlsx', sheetName = 'Resultados')
ebay <- read.xlsx('eBayAuctions.xls', sheetIndex=1)
class(ebay)
ebay <- read.xlsx('eBayAuctions.xls', sheetIndex=1)
str(ebay)
tail(ebay)
if(!is.installed('RWeka'))
install.packages('RWeka')
library('RWeka')
covertype <- read.arff(covertype.arff)
setwd('..')
getwd()
save.image()
covertype <- read.arff('data/covertype.arff')
class(covertype)
str(covertype)
head(covertype)
if(!is.installed('RCurl'))
install.packages('RCurl')
library('RCurl')
url <- getURL(
  C:\CODIGO\R-Charte\ExploraVisualizaconR\scripts\data
url <- getURL(
'https://raw.githubusercontent.com/fcharte/CursoUNIA14/ master/data/results.csv', ssl.verifypeer = FALSE)
library(datasets)
data(iris)
str(iris)
head(iris)
save.image()
q()
valores <- as.integer(runif(50,1,10))
indices <- as.integer(runif(5,1,50))
valores[indices] <- NA
valores
valores > 5
valores + 10
mean(valores)
is.na(valores)
na.fail(valores)
any(is.na(valores))
na.fail(valores)
str(airquality)
nrow(airquality)
nrow(na.omit(airquality))
nrow(na.omit(airquality))
nrow(airquality[complete.cases(airquality),])
promedio <- mean(valores, na.rm = TRUE)
promedio
valores[is.na(valores)] <- promedio
mean(valores)
save.image()
class(iris) 
typeof(iris)
str(iris)
summary(iris)
mean(iris$Petal.Length)
mean(iris$Sepal.Length)
lapply(iris[,1:4],mean)
mean(subset(iris, Species == 'versicolor', select = Sepal.Length)$Sepal.Length)
if(!is.installed('Hmisc'))
    install.packages('Hmisc')
library('Hmisc')
describe(ebay)
tail(table(ebay$sellerRating, ebay$currency))
table(iris$Sepal.Length, iris$Species)
cortes <- seq(from=4, to=8, by=0.5)
seplen <- cut(iris$Sepal.Length, breaks = cortes)
table(seplen, iris$Species)
bySpecies <- split(iris, iris$Species)
str(bySpecies)
mean(bySpecies$setosa$Sepal.Length)
str(covertype)
subset(covertype, slope > 45 & soil_type == '1', select = c(elevation, slope, class))
subcovertype <- covertype[sample(1:nrow(covertype),
                                     nrow(covertype)*.1),]
str(subcovertype)
valores
rank(valores)
set.seed(4242)
indices <- sample(1:nrow(iris), nTraining)
library(sample)
library('sample')
save.image()
q()
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width,
      col = iris$Species, pch = 19)
plot(iris$Sepal.Length, iris$Sepal.Width,
      col = iris$Species, pch = 19,
      xlab = 'Longitud del pétalo', ylab = 'Ancho del pétalo')
title(main= 'IRIS',
      sub = 'Exploración de los pétalos según especie',
      col.main = 'blue', col.sub = 'blue')
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 3, pch = 19, bty = "n")
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 1, pch = 19, bty = "n")
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 3, pch = 19, bty = "n")
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 3, pch = 19, bty = "n")
plot(iris$Sepal.Length, iris$Sepal.Width,
      col = iris$Species, pch = 19,
      col.main = 'blue', col.sub = 'blue')
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 3, pch = 19, bty = "n")
title(main= 'IRIS',
      sub = 'Exploración de los pétalos según especie',
      col.main = 'blue', col.sub = 'blue')
plot(iris$Sepal.Length, iris$Sepal.Width,
      col.main = 'blue', col.sub = 'blue')
plot(iris$Sepal.Length, iris$Sepal.Width,
      col = iris$Species, pch = 19,
      xlab = 'Longitud del pétalo', ylab = 'Ancho del pétalo')
title(main= 'IRIS',
      sub = 'Exploración de los pétalos según especie',
      col.main = 'blue', col.sub = 'blue')
legend("bottomright", legend = levels(iris$Species), col = unique(iris$Species), ncol = 3, pch = 19, bty = "n")
hist(iris)
plot(iris[,1:4], col = iris$Species)
if(!is.installed('ellipse'))
install.packages('ellipse')
library('ellipse')
library(ellipse)
plotcorr(cor(iris[,1:4]), col = heat.colors(10))
layout(matrix(c(1,1,2,3), 2, 2, byrow=T))
hist(ebay$Duration, main = 'Duración subasta', xlab = 'Días')
plotcorr(cor(iris[,1:4]), col = heat.colors(10))
plot(iris[,1:4], col = iris$Species)
pdf('AnalisisSubastas.pdf', width= 8.3, height= 11.7)
hist(ebay$Duration, main = 'Duración subasta', xlab = 'Días')
plotcorr(cor(iris[,1:4]), col = heat.colors(10))
dev.off()
if(!is.installed('animation'))
install.packages('animation')
library(animation)
saveGIF({
     for(lim in seq(-3.14, 3.14, by = 0.1)) {
         curve(sin, from = lim, to = lim + 9.42)
        }
}, movie.name = "animacion.gif",
interval = 0.1, ani.width = 640, ani.height = 640)
save.image()
q()
if(!is.installed('ggplot2'))
install.packages('ggplot2')
library(ggplot2)
qplot(Sepal.Length, Sepal.Width, data = iris, colour = Species, size = Petal.Width)
qplot(Sepal.Length, Sepal.Width, data = iris, colour = Species) + 
geom_line()
qplot(Sepal.Length, Sepal.Width, data = iris, colour = Species) + 
geom_line() + geom_smooth()
qplot(elevation, slope, data = covertype[sample(1:nrow(covertype), 500),],
geom = c("point", "smooth"), color = wilderness_area) + 
theme_bw()
qplot(elevation, data = covertype, geom = "density", fill = wilderness_area)
if(!is.installed("circlize")) install.packages("circlize")
library(circlize)
mat = matrix(sample(1:100, 18, replace = TRUE), 3, 6)
rownames(mat) = letters[1:3]
colnames(mat) = LETTERS[1:6]
rn = rownames(mates)ç
rn = rownames(mates)
rn = rownames(mat)
cn = colnames(mat)
if(!is.installed("fmsb")) install.packages("fmsb")
library(fmsb)
if(!is.installed('scatterplot3d')) install.packages('scatterplot3d')
z <- seq(-10, 10, 0.01)
x <- cos(z)
y <- sin(z)
scatterplot3d(x,y,z, highlight.3d = TRUE, col.axis = "blue", col.grid = "lightblue", main = "Helix", pch = 20)
library(fmsb)
library('scatterplot3d')
scatterplot3d(x,y,z, highlight.3d = TRUE, col.axis = "blue", col.grid = "lightblue", main = "Helix", pch = 20)
if(!is.installed('lattice')) install.packages('lattice')
library('lattice')
library("lattice")
if(!is.installed("lattice")) install.packages("lattice")
if(!is.installed('TurtleGraphics')) install.packages('TurtleGraphics')
library('TurtleGraphics')
save.image()
q()
